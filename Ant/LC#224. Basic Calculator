2.stack,
1）遇到(，把结果和sign放进stack，结果设为0，sign设为+（初始化）重新开始，
2）遇到），根据stack中的sign，把现在的结果和和stack结果相加或相减
有一个trick，如何把sign放入int的stack？sign是1和-1，sign*num即可


        int sum = 0;
        int index = 0;
        int sign = 1;
        Stack<Integer> stack = new Stack<Integer>();
        
        while (index < s.length()) {
            char c = s.charAt(index);
            if (Character.isDigit(c)) {
                int endIndex = index + 1;
                while (endIndex < s.length () && Character.isDigit(s.charAt(endIndex))) endIndex++;
                int num = Integer.parseInt(s.substring(index, endIndex));
                sum += sign * num;
                index = endIndex - 1;
            } else if (c == '-') {
                sign = -1;
            } else if (c == '+') {
                sign = 1;
            } else if (c == '(') {
                stack.push(sign);
                stack.push(sum);
                sum = 0;
                sign = 1;
            } else if (c == ')') {
                int tempsum = sum;
                sum = stack.pop() ;
                sum += stack.pop() * tempsum;
            }
            
            index++;
        }
        
        return sum;
注意一定要判断下标在不在范围内！
