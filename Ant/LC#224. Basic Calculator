def calculate(self, s):
    #"(6-(4-5+2)-3)+(6+8)"
    res, num, sign, stack = 0, 0, 1, []
    for ss in s:
        if ss.isdigit():
            num = 10*num + int(ss)
        elif ss in ["-", "+"]:
            res += sign*num
            num = 0
            sign = [-1, 1][ss=="+"]
        elif ss == "(":
            stack.append(res)
            stack.append(sign)
            sign, res = 1, 0
        elif ss == ")":
            res += sign*num
            res *= stack.pop()
            res += stack.pop()
            num = 0
    return res + num*sign


#LC#227.
    def calculate(self, s):
        res = 0
        num = 0
        num_ch = 0
        sign = '+'
        stack = []

        for ch in s:
            num_ch += 1
            if ch.isdigit():
                num = 10 * num + int(ch)

            if ch != ' ' and not ch.isdigit() or num_ch == len(s):
                if sign == '+':
                    stack.append(num)
                if sign == '-':
                    stack.append(-num)
                if sign == '*':
                    last_num = stack.pop()
                    stack.append(last_num * num)
                if sign == '/':
                    last_num = stack.pop()
                    stack.append(int(last_num / num))
                sign = ch
                num = 0

        for num in stack:
            res += num

        return res
