##########################################
# 2 pointers: fast and slow;
# pay attention to when slow increment
##########################################
class Solution:
    """
    @param: nums: An ineger array
    @return: An integer
    """
    def removeDuplicates(self, nums):
        # write your code here
        """
        if not nums:
            return 0
        idx = 0
        for i in range(1, len(nums)):
            if not nums[i] == nums[idx]:
                idx += 1
                nums[idx] = nums[i]
            print 'slow: ', idx
            print 'fast: ', i
        return idx + 1
        """
        if not nums:
            return 0
        slow = 0
        fast = 1
        while fast < len(nums):
            if nums[slow] == nums[fast]:
                fast += 1
            else:
                slow += 1
                nums[slow] = nums[fast]
        return slow + 1
############################################
# a general approach
# k is the number of duplicate allowed
############################################

class Solution(object):
    def removeDuplicates(self, nums, k):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 3:
            return nums
        slow = 0
        fast = 0
        #k = 2
        count = 1
        while fast < len(nums):
            if not nums[fast] == nums[fast - 1]:
                nums[slow] = nums[fast]
                slow += 1
                count = 1
            else:
                if count < k:
                    nums[slow] = nums[fast]
                    count += 1
                    slow += 1
                    
            fast += 1
            
        return slow
        
