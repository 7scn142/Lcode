# Leetcode #675; lintcode #1092

class Solution(object):
    def cutOffTree(self, forest):
        # find and sort all the trees
        trees = sorted((v, r, c) for r, row in enumerate(forest)
                       for c, v in enumerate(row) if v > 1)
        sr = sc = ans = 0
        # cut the trees from low to high and count the steps;
        # update the start point to location of chopped tree
        # start next search
        for _, tr, tc in trees:
            d = self.bfs(forest, sr, sc, tr, tc)
            if d < 0: return -1
            ans += d
            sr, sc = tr, tc
        return ans
    
    
    # sr : source row index
    # sc : source colomn index
    # tr : target row index
    # tc : target column index
    # return distance from source to target
    def bfs(self, forest, sr, sc, tr, tc):
        R, C = len(forest), len(forest[0])
        queue = collections.deque([(sr, sc, 0)])
        seen = {(sr, sc)}
        while queue:
            r, c, d = queue.popleft()
            if r == tr and c == tc:
                return d
            for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):
                if (0 <= nr < R and 0 <= nc < C and
                        (nr, nc) not in seen and forest[nr][nc]):
                    seen.add((nr, nc))
                    queue.append((nr, nc, d+1))
        return -1
