class Solution:
    """
    @param numbers: the given list
    @param node1: the given node1
    @param node2: the given node2
    @return: the distance between two nodes
    """
    def bstDistance(self, numbers, node1, node2):
        # build the BST
        # find LCA
        # get distance
        n_set = set(numbers) 
        if not (node1 in n_set and node2 in n_set) or not numbers:
            return -1
        m1 = False
        m2 = False
        root = BSTnode(numbers[0])
        for num in numbers[1:]:
            self.construct(root, num)
            if num == node1:
                m1 = True
            if num == node2:
                m2 = True
                
            if m1 and m2:
                break
        
        n1 = min(node1, node2)
        n2 = max(node1, node2)
        
        ances = self.LCA(root, n1, n2)
        
        dis1 = self.dis(ances, node1)
        dis2 = self.dis(ances, node2)
        
        return dis1 + dis2
        
    def construct(self, root, num):
        if num < root.val:
            if root.left:
                self.construct(root.left, num)
            else:
                root.left = BSTnode(num)
        else:
            if root.right:
                self.construct(root.right, num)
            else:
                root.right = BSTnode(num)
        
        
    def LCA(self, root, n1, n2):
        
        if n1 <= root.val <= n2 :
            return root
        
        if root.val < n1:
            return self.LCA(root.right, n1, n2)
            
        if root.val > n2:
            return self.LCA(root.left, n1, n2)
        
        
    def dis(self, root, node):
        if root.val == node:
            return 0
        if root.val < node:
            return self.dis(root.right, node) + 1
        if root.val > node:
            return self.dis(root.left, node) + 1
