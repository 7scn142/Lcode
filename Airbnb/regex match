    def isMatch(self, A, B):
        """ 
        A is source B is pattern 
        Implement regular expression matching with support for '.' and '*' 
            '.' Matches any single character.
            '*' Matches zero or more of the preceding element.
            The matching should cover the entire input string (not partial)
        Example:
            isMatch("aa","a") -> false
            isMatch("aa","aa") -> true
            isMatch("aaa","aa") -> false
            isMatch("aa", "a*") -> true
            isMatch("aa", ".*") -> true
            isMatch("ab", ".*") -> true
            isMatch("aab", "c*a*b") -> true
        """
        
        m = len(A)
        n = len(B)
        f = [[None for j in range(n+1)] for i in range(m+1)]
        f[0][0] = True
        for j in range(1, n+1):
            f[0][j] = False
            if B[j-1] == '*' and j >= 2:
                f[0][j] = f[0][j-2]
        
        for i in range(1, m+1):
            f[i][0] = False
            for j in range(1, n+1):
                f[i][j] = False
                if B[j-1] == '*' and j >= 2:
                    f[i][j] = f[i][j-2]
                    if B[j-2] in (A[i-1], '.'):
                        f[i][j] |= f[i-1][j]
                elif B[j-1] in (A[i-1], '.'):
                    f[i][j] = f[i-1][j-1]
                    
        return f[m][n]

